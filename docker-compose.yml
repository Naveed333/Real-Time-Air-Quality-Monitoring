version: "3.8"

services:
  # Zookeeper service
  zoo1:
    image: confluentinc/cp-zookeeper:7.8.0
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - kafka_network

  # Kafka service
  kafka1:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"  # Ensure this is pointing to the correct Zookeeper hostname
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zoo1
    networks:
      - kafka_network

  # Streamlit App (Main Application for monitoring)
  streamlit_app:
    build: .
    container_name: streamlit_app
    ports:
      - "8501:8501"
    environment:
      - PYTHONPATH=/app
    volumes:
      - .:/app
    depends_on:
      - kafka1
    command: streamlit run /app/streamlit_app/app.py
    networks:
      - kafka_network

  # Grafana service for real-time visualization
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: hadesarchitect-kafka-datasource
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - kafka1
    networks:
      - kafka_network

  # PostgreSQL (Optional, for storing historical air quality data)
  postgres:
    image: postgres:latest
    container_name: postgres_db
    environment:
      POSTGRES_USER: air_quality_user
      POSTGRES_PASSWORD: air_quality_password
      POSTGRES_DB: air_quality_db
    ports:
      - "5433:5432"
    networks:
      - kafka_network

volumes:
  grafana_data:
  postgres_data:

networks:
  kafka_network:
    driver: bridge
